var N = null;var searchIndex = {};
searchIndex["gu_actix"]={"doc":"","items":[[0,"flatten","gu_actix","",N,N],[3,"FlatFut","gu_actix::flatten","",N,N],[8,"FlattenResult","","",N,N],[10,"flatten_result","","",0,[[["self"]],["result"]]],[8,"FlattenFuture","","",N,N],[16,"Future","","",1,N],[10,"flatten_fut","","",1,N],[11,"poll","","",2,[[["self"]],["result",["async"]]]],[0,"prelude","gu_actix","",N,N],[11,"flatten_fut","gu_actix::flatten","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_future","","",2,[[["self"]],["f"]]]],"paths":[[8,"FlattenResult"],[8,"FlattenFuture"],[3,"FlatFut"]]};
searchIndex["gu_base"]={"doc":"","items":[[3,"App","gu_base","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",N,N],[3,"Arg","","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",N,N],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",N,N],[3,"SubCommand","","The abstract representation of a command line subcommand.",N,N],[3,"AutocompleteModule","","",N,N],[3,"LogModule","","",N,N],[3,"ChainModule","","",N,N],[3,"GuApp","","",N,N],[12,"0","","",0,N],[5,"run_once","","",N,[[["f"]]]],[0,"cli","","",N,N],[3,"FORMAT_BASIC","gu_base::cli","",N,N],[5,"format_table","","",N,[[["row"],["msgfn"],["rowiter"]]]],[11,"deref","","",1,[[["self"]],["tableformat"]]],[11,"initialize","","",1,[[["self"]]]],[0,"files","gu_base","",N,N],[3,"ChunkedReadFile","gu_base::files","https://actix.rs/api/actix-web/stable/src/actix_web/fs.rs.html#477-484",N,N],[5,"write_async_with_sha1","","",N,N],[5,"write_async","","",N,N],[5,"read_async","","",N,N],[5,"untgz_async","","",N,N],[11,"new","","",2,[[["file"],["cpupool"]],["result",["chunkedreadfile","string"]]]],[11,"new_ranged","","",2,N],[11,"poll","","",2,[[["self"]],["poll",["option","string"]]]],[11,"verbosity","gu_base","",3,[[["self"]],["isize"]]],[11,"args_declare","","",3,[[["self"],["app"]],["app"]]],[11,"args_consume","","",3,[[["self"],["argmatches"]],["bool"]]],[11,"new","","",4,[[],["autocompletemodule"]]],[11,"args_declare","","",4,[[["self"],["app"]],["app"]]],[11,"args_autocomplete","","",4,[[["self"],["argmatches"],["f"]],["bool"]]],[8,"Decorator","","",N,N],[10,"decorate_webapp","","",5,[[["self"],["app"]],["app"]]],[10,"extract","","",5,[[["self"]],["option"]]],[8,"Module","","",N,N],[11,"args_declare","","",6,[[["self"],["app"]],["app"]]],[11,"args_autocomplete","","",6,[[["self"],["argmatches"],["f"]],["bool"]]],[11,"args_consume","","",6,[[["self"],["argmatches"]],["bool"]]],[11,"prepare","","",6,[[["self"]],["box",["future"]]]],[11,"run","","",6,[[["self"],["d"]]]],[11,"decorate_webapp","","",6,[[["self"],["app"]],["app"]]],[11,"extract","","",6,[[["self"]],["option"]]],[8,"ModuleChain","","",N,N],[16,"Output","","",7,N],[10,"chain","","",7,N],[11,"args_declare","","",8,[[["self"],["app"]],["app"]]],[11,"args_autocomplete","","",8,[[["self"],["argmatches"],["f"]],["bool"]]],[11,"args_consume","","",8,[[["self"],["argmatches"]],["bool"]]],[11,"prepare","","",8,[[["self"]],["box",["future"]]]],[11,"run","","",8,[[["self"],["d"]]]],[11,"decorate_webapp","","",8,[[["self"],["app"]],["app"]]],[11,"extract","","",8,[[["self"]],["option"]]],[11,"run","","",0,[[["self"],["m"]]]],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",9,[[["s"]],["app"]]],[11,"get_name","","Get the name of the app",9,[[["self"]],["str"]]],[11,"get_bin_name","","Get the name of the binary",9,[[["self"]],["option",["str"]]]],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",9,[[["s"]],["app"]]],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",9,[[["self"],["s"]],["app"]]],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",9,[[["self"],["s"]],["app"]]],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",9,[[["self"],["s"]],["app"]]],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",9,[[["self"],["s"]],["app"]]],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",9,[[["self"],["s"]],["app"]]],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",9,[[["self"],["s"]],["app"]]],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",9,[[["self"],["s"]],["app"]]],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",9,[[["self"],["s"]],["app"]]],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",9,[[["self"],["s"]],["app"]]],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",9,[[["self"],["s"]],["app"]]],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",9,[[["self"],["s"]],["app"]]],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",9,[[["self"],["s"]],["app"]]],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",9,[[["self"],["s"]],["app"]]],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",9,[[["self"],["s"]],["app"]]],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",9,[[["self"],["s"]],["app"]]],[11,"template","","Sets the help template to be used, overriding the default format.",9,[[["self"],["s"]],["app"]]],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",9,[[["self"],["appsettings"]],["app"]]],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",9,N],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",9,[[["self"],["appsettings"]],["app"]]],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",9,N],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",9,[[["self"],["appsettings"]],["app"]]],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",9,N],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",9,[[["self"],["usize"]],["app"]]],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",9,[[["self"],["usize"]],["app"]]],[11,"arg","","Adds an [argument] to the list of valid possibilities.",9,[[["self"],["a"]],["app"]]],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",9,N],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",9,[[["self"],["str"]],["app"]]],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",9,[[["self"],["str"]],["app"]]],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",9,[[["self"],["s"]],["app"]]],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",9,N],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",9,[[["self"],["s"]],["app"]]],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",9,N],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",9,[[["self"],["arggroup"]],["app"]]],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",9,N],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",9,[[["self"],["app"]],["app"]]],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",9,[[["self"],["i"]],["app"]]],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",9,[[["self"],["usize"]],["app"]]],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",9,[[["self"]],["result",["error"]]]],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",9,[[["self"]],["result",["error"]]]],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",9,[[["self"],["w"]],["result",["error"]]]],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",9,[[["self"],["w"]],["result",["error"]]]],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",9,[[["self"],["w"]],["result",["error"]]]],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",9,[[["self"],["w"]],["result",["error"]]]],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",9,N],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",9,N],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",9,[[["self"]],["argmatches"]]],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",9,[[["self"]],["result",["argmatches","error"]]]],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",9,[[["self"],["i"]],["argmatches"]]],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",9,[[["self"],["i"]],["result",["argmatches","error"]]]],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",9,[[["self"],["i"]],["result",["argmatches","error"]]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["arg"]],["arg"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",11,[[],["argmatches"]]],[11,"default","","",10,[[],["arg"]]],[11,"eq","","",10,[[["self"],["arg"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",11,[[["self"]],["argmatches"]]],[11,"clone","","",12,[[["self"]],["subcommand"]]],[11,"clone","","",10,[[["self"]],["arg"]]],[11,"clone","","",9,[[["self"]],["app"]]],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",10,[[["str"]],["arg"]]],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",10,[[["str"]],["arg"]]],[11,"short","","Sets the short version of the argument without the preceding `-`.",10,[[["self"],["s"]],["arg"]]],[11,"long","","Sets the long version of the argument without the preceding `--`.",10,[[["self"],["str"]],["arg"]]],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",10,[[["self"],["s"]],["arg"]]],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",10,N],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",10,[[["self"],["s"]],["arg"]]],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",10,N],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",10,[[["self"],["str"]],["arg"]]],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",10,[[["self"],["str"]],["arg"]]],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",10,[[["self"],["bool"]],["arg"]]],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",10,[[["self"],["bool"]],["arg"]]],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",10,[[["self"],["bool"]],["arg"]]],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",10,[[["self"],["bool"]],["arg"]]],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",10,[[["self"],["str"]],["arg"]]],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",10,N],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",10,N],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",10,[[["self"],["str"]],["arg"]]],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",10,N],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",10,[[["self"],["str"]],["arg"]]],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",10,N],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",10,[[["self"],["str"]],["arg"]]],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",10,[[["self"],["str"],["str"]],["arg"]]],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",10,N],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",10,[[["self"],["str"],["str"]],["arg"]]],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",10,N],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",10,N],[11,"takes_value","","Specifies that the argument takes a value at run time.",10,[[["self"],["bool"]],["arg"]]],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",10,[[["self"],["bool"]],["arg"]]],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",10,[[["self"],["bool"]],["arg"]]],[11,"index","","Specifies the index of a positional argument starting at 1.",10,[[["self"],["u64"]],["arg"]]],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",10,[[["self"],["bool"]],["arg"]]],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",10,[[["self"],["str"]],["arg"]]],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",10,[[["self"],["bool"]],["arg"]]],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",10,[[["self"],["bool"]],["arg"]]],[11,"hidden","","Hides an argument from help message output.",10,[[["self"],["bool"]],["arg"]]],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",10,N],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",10,[[["self"],["str"]],["arg"]]],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",10,[[["self"],["bool"]],["arg"]]],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",10,[[["self"],["str"]],["arg"]]],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",10,N],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",10,[[["self"],["u64"]],["arg"]]],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",10,[[["self"],["f"]],["arg"]]],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",10,[[["self"],["f"]],["arg"]]],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",10,[[["self"],["u64"]],["arg"]]],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",10,[[["self"],["u64"]],["arg"]]],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",10,[[["self"],["bool"]],["arg"]]],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",10,[[["self"],["bool"]],["arg"]]],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",10,[[["self"],["str"]],["arg"]]],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",10,N],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",10,[[["self"],["str"]],["arg"]]],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",10,[[["self"],["str"]],["arg"]]],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",10,[[["self"],["osstr"]],["arg"]]],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",10,[[["self"],["str"],["option",["str"]],["str"]],["arg"]]],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",10,[[["self"],["str"],["option",["osstr"]],["osstr"]],["arg"]]],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",10,N],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",10,N],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",10,[[["self"],["str"]],["arg"]]],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",10,[[["self"],["osstr"]],["arg"]]],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",10,[[["self"],["bool"]],["arg"]]],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",10,[[["self"],["bool"]],["arg"]]],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",10,[[["self"],["usize"]],["arg"]]],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",10,[[["self"],["bool"]],["arg"]]],[11,"hidden_short_help","","Hides an argument from short help message output.",10,[[["self"],["bool"]],["arg"]]],[11,"hidden_long_help","","Hides an argument from long help message output.",10,[[["self"],["bool"]],["arg"]]],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",10,[[["self"],["argsettings"]],["bool"]]],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",10,[[["self"],["argsettings"]],["arg"]]],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",10,[[["self"],["argsettings"]],["arg"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",11,[[["self"],["s"]],["option",["str"]]]],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",11,[[["self"],["s"]],["option",["cow"]]]],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",11,[[["self"],["s"]],["option",["osstr"]]]],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",11,[[["self"],["s"]],["option",["values"]]]],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",11,[[["self"],["s"]],["option",["vec"]]]],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",11,[[["self"],["s"]],["option",["osvalues"]]]],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",11,[[["self"],["s"]],["bool"]]],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",11,[[["self"],["s"]],["u64"]]],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",11,[[["self"],["s"]],["option",["usize"]]]],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",11,[[["self"],["s"]],["option",["indices"]]]],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",11,[[["self"],["s"]],["option",["argmatches"]]]],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",11,[[["self"]],["option",["str"]]]],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",11,N],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",11,[[["self"]],["str"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",12,[[["str"]],["app"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"chain","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"chain","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"chain","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","gu_base::cli","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","gu_base::files","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_actor","","",2,N]],"paths":[[3,"GuApp"],[3,"FORMAT_BASIC"],[3,"ChunkedReadFile"],[3,"LogModule"],[3,"AutocompleteModule"],[8,"Decorator"],[8,"Module"],[8,"ModuleChain"],[3,"ChainModule"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"SubCommand"]]};
searchIndex["gu_envman_api"]={"doc":"","items":[[3,"Image","gu_envman_api","image with binaries and resources for given session",N,N],[12,"url","","",0,N],[12,"hash","","",0,N],[3,"CreateSession","","Message for session creation: local provisioning: downloads and unpacks the binaries",N,N],[12,"env_type","","",1,N],[12,"image","","",1,N],[12,"name","","",1,N],[12,"tags","","",1,N],[12,"note","","",1,N],[3,"SessionUpdate","","",N,N],[12,"session_id","","",2,N],[12,"commands","","",2,N],[3,"GetSessions","","",N,N],[3,"DestroySession","","Message for session destruction: clean local resources and kill all child processes",N,N],[12,"session_id","","",3,N],[4,"Error","","Errors",N,N],[13,"Error","","",4,N],[13,"IoError","","",4,N],[13,"NoSuchSession","","",4,N],[13,"NoSuchChild","","",4,N],[13,"UnknownEnv","","",4,N],[4,"Command","","",N,N],[13,"Exec","","",5,N],[12,"executable","gu_envman_api::Command","",5,N],[12,"args","","",5,N],[13,"Start","gu_envman_api","",5,N],[12,"executable","gu_envman_api::Command","",5,N],[12,"args","","",5,N],[13,"Stop","gu_envman_api","",5,N],[12,"child_id","gu_envman_api::Command","",5,N],[13,"AddTags","gu_envman_api","",5,N],[13,"DelTags","","",5,N],[13,"DownloadFile","","",5,N],[12,"uri","gu_envman_api::Command","",5,N],[12,"file_path","","",5,N],[13,"UploadFile","gu_envman_api","",5,N],[12,"uri","gu_envman_api::Command","",5,N],[12,"file_path","","",5,N],[11,"fmt","gu_envman_api","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["error"]],["self"]]],[11,"from","","",4,[[["mailboxerror"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["string"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["image"]]],[18,"ID","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",5,N],[11,"eq","","",5,[[["self"],["command"]],["bool"]]],[11,"ne","","",5,[[["self"],["command"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[18,"ID","","",2,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[18,"ID","","",6,N],[18,"ID","","",3,N],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"equivalent","","",5,[[["self"],["k"]],["bool"]]]],"paths":[[3,"Image"],[3,"CreateSession"],[3,"SessionUpdate"],[3,"DestroySession"],[4,"Error"],[4,"Command"],[3,"GetSessions"]]};
searchIndex["gu_ethkey"]={"doc":"Ethereum keys management supporting keystores in formats used by [geth], [parity] and [pyethereum].","items":[[3,"SafeEthKey","gu_ethkey","An Ethereum `KeyPair` wrapper with Store.",N,N],[3,"Error","","The Error type.",N,N],[12,"0","","The kind of the error.",0,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",1,N],[13,"GenerationError","","",1,N],[13,"KeyError","","",1,N],[13,"CryptoError","","",1,N],[13,"StoreCryptoError","","",1,N],[13,"StoreError","","",1,N],[13,"InvalidPath","","",1,N],[0,"prelude","","A \"prelude\" for users of the `gu-ethkey` crate.",N,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[17,"KEY_ITERATIONS","","HMAC fn iteration count; compromise between security and performance",N,N],[8,"EthKey","","Provides basic [EC] operations on curve [Secp256k1].",N,N],[10,"public","","get public key",2,[[["self"]],["public"]]],[10,"address","","get ethereum address",2,[[["self"]],["address"]]],[10,"sign","","signs message with sef key",2,[[["self"],["message"]],["result",["signature"]]]],[10,"verify","","verifies signature for message and self key",2,[[["self"],["signature"],["message"]],["result",["bool"]]]],[10,"encrypt","","ciphers given plain data",2,N],[10,"decrypt","","deciphers given encrypted data",2,N],[8,"EthKeyStore","","Provides basic serde for Ethereum `KeyPair`.",N,N],[10,"load_or_generate","","reads keys from disk or generates new ones and stores to disk; pass needed",3,[[["p"],["password"]],["result",["box"]]]],[10,"change_password","","stores keys on disk with changed password",3,[[["self"],["password"]],["result"]]],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",4,[[["self"],["f"]],["result",["error"]]]],[11,"public","","",5,[[["self"]],["public"]]],[11,"address","","",5,[[["self"]],["address"]]],[11,"sign","","",5,[[["self"],["message"]],["result",["signature"]]]],[11,"verify","","",5,[[["self"],["signature"],["message"]],["result",["bool"]]]],[11,"encrypt","","",5,N],[11,"decrypt","","",5,N],[11,"load_or_generate","","",5,[[["p"],["password"]],["result",["box"]]]],[11,"change_password","","",5,[[["self"],["password"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",0,N],[11,"with_chain","","",0,[[["e"],["k"]],["self"]]],[11,"kind","","",0,N],[11,"iter","","",0,[[["self"]],["iter"]]],[11,"chain_err","","",0,[[["self"],["f"]],["self"]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",0,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",0,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",0,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",0,[[["self"]],["str"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["errorkind"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",1,[[["self"]],["str"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"EthKey"],[8,"EthKeyStore"],[8,"ResultExt"],[3,"SafeEthKey"]]};
searchIndex["gu_event_bus"]={"doc":"Application event bus.","items":[[3,"Event","gu_event_bus","Empty event",N,N],[5,"post_event","","",N,[[["string"],["t"]]]],[5,"subscribe","","",N,N],[11,"clone","","",0,[[["self"]],["self"]]],[11,"path","","",0,[[["self"]],["str"]]],[11,"data","","",0,[[["self"]],["t"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[3,"Event"]]};
searchIndex["gu_hardware"]={"doc":"","items":[[3,"HardwareModule","gu_hardware","",N,N],[5,"module","","",N,[[],["hardwaremodule"]]],[0,"actor","","",N,N],[3,"HardwareQuery","gu_hardware::actor","",N,N],[3,"Hardware","","",N,N],[3,"HardwareActor","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["hardwarequery"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["hardware"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["hardwareactor"]]],[11,"started","","",2,N],[11,"handle","","",2,N],[0,"gpuinfo","gu_hardware","",N,N],[3,"GpuCount","gu_hardware::gpuinfo","",N,N],[12,"amd","","",3,N],[12,"nvidia","","",3,N],[12,"intel","","",3,N],[12,"other","","",3,N],[5,"gpu_count","","",N,[[],["result",["gpucount"]]]],[11,"default","","",3,[[],["gpucount"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["gpucount"]]],[0,"error","gu_hardware","",N,N],[3,"Error","gu_hardware::error","The Error type.",N,N],[12,"0","","The kind of the error.",4,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",5,N],[13,"IoError","","",5,N],[13,"StripPrefixError","","",5,N],[13,"PathMountpointNotFound","","",5,N],[13,"MailboxError","","",5,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",6,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","",4,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",4,N],[11,"with_chain","","",4,[[["e"],["k"]],["self"]]],[11,"kind","","",4,N],[11,"iter","","",4,[[["self"]],["iter"]]],[11,"chain_err","","",4,[[["self"],["f"]],["self"]]],[11,"backtrace","","",4,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",4,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",4,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",4,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",4,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",4,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",4,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",4,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",4,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",4,[[["self"]],["str"]]],[11,"description","","",4,[[["self"]],["str"]]],[11,"cause","","",4,[[["self"]],["option",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from","","",4,[[["error"]],["self"]]],[11,"from","","",4,[[["stripprefixerror"]],["self"]]],[11,"from","","",4,[[["errorkind"]],["self"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"from","","",4,[[["string"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",5,[[["self"]],["str"]]],[11,"from","","",5,[[["str"]],["self"]]],[11,"from","","",5,[[["string"]],["self"]]],[11,"from","","",5,[[["error"]],["self"]]],[11,"from","","",4,[[["mailboxerror"]],["self"]]],[11,"run","gu_hardware","",7,[[["self"],["d"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"chain","","",7,N],[11,"from","gu_hardware::actor","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","gu_hardware::gpuinfo","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","gu_hardware::error","",4,[[["t"]],["t"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]]],"paths":[[3,"HardwareQuery"],[3,"Hardware"],[3,"HardwareActor"],[3,"GpuCount"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"HardwareModule"]]};
searchIndex["gu_hub"]={"doc":"","items":[],"paths":[]};
searchIndex["gu_lan"]={"doc":"mDNS discovery for Golem Unlimited nodes.","items":[[3,"NewInstance","gu_lan","",N,N],[12,"data","","",0,N],[3,"Subscription","","",N,N],[3,"ServiceDescription","","Struct describing single service in .local domain's network",N,N],[3,"HubDesc","","Hub mDNS data",N,N],[12,"address","","ip & TCP port.",1,N],[12,"host_name","","",1,N],[12,"node_id","","nodes public key hash",1,N],[3,"MdnsPublisher","","",N,N],[5,"list_hubs","","Lists HUBs visible in local network.",N,N],[0,"actor","","",N,N],[3,"MdnsActor","gu_lan::actor","Actor resolving mDNS services names into list of IPs",N,N],[3,"OneShot","","",N,N],[3,"Continuous","","",N,N],[3,"SubscribeInstance","","",N,N],[12,"service","","",2,N],[12,"rec","","",2,N],[5,"send_mdns_query","","",N,N],[6,"OneShotResponse","","",N,N],[6,"ContinuousResponse","","",N,N],[8,"MdnsConnection","","",N,N],[10,"port","","",3,[[],["u16"]]],[10,"unicast_query","","",3,[[],["bool"]]],[10,"handle_packet","","",3,[[["self"],["parsedpacket"],["socketaddr"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["mdnsactor"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",5,[[],["oneshot"]]],[11,"default","","",6,[[],["continuous"]]],[11,"port","","",5,[[],["u16"]]],[11,"unicast_query","","",5,[[],["bool"]]],[11,"handle_packet","","",5,[[["self"],["parsedpacket"],["socketaddr"]]]],[11,"port","","",6,[[],["u16"]]],[11,"unicast_query","","",6,[[],["bool"]]],[11,"handle_packet","","",6,[[["self"],["parsedpacket"],["socketaddr"]]]],[11,"new","","",4,[[],["self"]]],[11,"started","","Creates stream handler for incoming mDNS packets",4,N],[11,"handle","","",4,N],[11,"drop","gu_lan","",7,[[["self"]]]],[0,"errors","","",N,N],[3,"Error","gu_lan::errors","The Error type.",N,N],[12,"0","","The kind of the error.",8,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",9,N],[13,"IoError","","",9,N],[13,"CanceledFutureError","","",9,N],[13,"DnsParserError","","",9,N],[13,"DnsPacketBuildError","","",9,N],[13,"ActorNotInitialized","","",9,N],[13,"UninitializedChannelReceiver","","",9,N],[13,"FutureSendError","","",9,N],[13,"MissingKey","","",9,N],[13,"DoSendError","","",9,N],[13,"Mailbox","","",9,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",10,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","",8,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",8,N],[11,"with_chain","","",8,[[["e"],["k"]],["self"]]],[11,"kind","","",8,N],[11,"iter","","",8,[[["self"]],["iter"]]],[11,"chain_err","","",8,[[["self"],["f"]],["self"]]],[11,"backtrace","","",8,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",8,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",8,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",8,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",8,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",8,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",8,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",8,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",8,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",8,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]],[11,"cause","","",8,[[["self"]],["option",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from","","",8,[[["error"]],["self"]]],[11,"from","","",8,[[["canceled"]],["self"]]],[11,"from","","",8,[[["error"]],["self"]]],[11,"from","","",8,[[["errorkind"]],["self"]]],[11,"from","","",8,[[["str"]],["self"]]],[11,"from","","",8,[[["string"]],["self"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",9,[[["self"]],["str"]]],[11,"from","","",9,[[["str"]],["self"]]],[11,"from","","",9,[[["string"]],["self"]]],[11,"from","","",9,[[["error"]],["self"]]],[11,"from","","",8,[[["mailboxerror"]],["self"]]],[0,"module","gu_lan","Command line module for one-shot service discovery",N,N],[3,"LanModule","gu_lan::module","",N,N],[5,"format_instances_table","","",N,[[["hashset"]]]],[11,"module","","",11,[[],["lanmodule"]]],[11,"args_declare","","",11,[[["self"],["app"]],["app"]]],[11,"args_consume","","",11,[[["self"],["argmatches"]],["bool"]]],[11,"run","","",11,[[["self"],["d"]]]],[11,"fmt","gu_lan","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["servicedescription"]]],[11,"new","","",12,[[["a"],["b"]],["self"]]],[11,"from","","",12,[[["t"]],["self"]]],[17,"ID_LAN","","",N,N],[11,"clone","","",1,[[["self"]],["hubdesc"]]],[11,"default","","",13,[[],["self"]]],[11,"start","","",13,[[["self"]]]],[11,"stop","","",13,[[["self"]]]],[11,"init_provider","","",13,[[["u16"],["s"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","gu_lan::actor","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","gu_lan::errors","",8,[[["t"]],["t"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","gu_lan::module","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"chain","","",11,N]],"paths":[[3,"NewInstance"],[3,"HubDesc"],[3,"SubscribeInstance"],[8,"MdnsConnection"],[3,"MdnsActor"],[3,"OneShot"],[3,"Continuous"],[3,"Subscription"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"LanModule"],[3,"ServiceDescription"],[3,"MdnsPublisher"]]};
searchIndex["gu_net"]={"doc":"","items":[[0,"rpc","gu_net","",N,N],[3,"RemotingContext","gu_net::rpc","",N,N],[3,"RpcError","","The Error type.",N,N],[12,"0","","The kind of the error.",0,N],[3,"EmitMessage","","",N,N],[12,"dest_node","","",1,N],[12,"destination","","",1,N],[12,"correlation_id","","",1,N],[12,"reply_to","","",1,N],[12,"ts","","",1,N],[12,"expires","","",1,N],[12,"body","","",1,N],[3,"RouteMessage","","",N,N],[12,"msg_id","","",2,N],[12,"sender","","",2,N],[12,"destination","","",2,N],[12,"reply_to","","",2,N],[12,"correlation_id","","",2,N],[12,"ts","","",2,N],[12,"expires","","",2,N],[12,"body","","",2,N],[5,"start_actor","","",N,[[["a"]],["addr"]]],[5,"gen_destination_id","","",N,[[],["destinationid"]]],[5,"public_destination","","",N,[[["u32"]],["destinationid"]]],[11,"stop","","",3,[[["self"]]]],[11,"terminate","","",3,[[["self"]]]],[11,"state","","",3,[[["self"]],["actorstate"]]],[11,"spawn","","",3,[[["self"],["f"]],["spawnhandle"]]],[11,"wait","","",3,[[["self"],["f"]]]],[11,"cancel_future","","",3,[[["self"],["spawnhandle"]],["bool"]]],[11,"address","","",3,[[["self"]],["addr"]]],[11,"parts","","",3,[[["self"]],["contextparts"]]],[11,"pack","","",3,[[["m"],["option",["sender"]]],["envelope"]]],[11,"run","","",3,[[["self"],["a"]],["addr"]]],[11,"into_future","","",3,[[["self"],["a"]],["contextfut"]]],[11,"bind","","",3,[[["self"],["u32"]]]],[11,"register","","",3,N],[11,"clone","","",2,[[["self"]],["routemessage"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"do_reply","","",2,[[["self"],["t"],["f"]]]],[11,"unit","","",2,[[["self"]],["routemessage"]]],[11,"from_json","","",2,[[["self"]],["result",["routemessage"]]]],[11,"default","","",1,[[],["emitmessage"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"reply","","",1,[[["routemessage"],["transportresult"]],["option"]]],[0,"mock","","",N,N],[5,"scope","gu_net::rpc::mock","",N,[[["scope"]],["scope"]]],[0,"peer","gu_net::rpc","",N,N],[3,"PeerInfo","gu_net::rpc::peer","",N,N],[12,"node_name","","",4,N],[12,"peer_addr","","",4,N],[12,"node_id","","",4,N],[12,"sessions","","",4,N],[12,"tags","","",4,N],[3,"PeerSessionInfo","","",N,N],[12,"id","","",5,N],[12,"name","","",5,N],[12,"status","","",5,N],[12,"tags","","",5,N],[12,"note","","",5,N],[12,"processes","","",5,N],[3,"PeerManager","","",N,N],[3,"ListPeers","","",N,N],[4,"State","","",N,N],[13,"PENDING","","",6,N],[13,"CREATED","","",6,N],[13,"RUNNING","","",6,N],[13,"DIRTY","","",6,N],[13,"DESTROYING","","",6,N],[4,"PeerSessionStatus","","",N,N],[13,"PENDING","","during session creation",7,N],[13,"CREATED","","after session creation, czysta",7,N],[13,"RUNNING","","with at least one active child",7,N],[13,"CONFIGURED","","DIRTY: when no child is running, but some commands were already executed",7,N],[13,"DESTROYING","","during session removal",7,N],[4,"UpdatePeer","","",N,N],[13,"Update","","",8,N],[13,"Delete","","",8,N],[11,"clone","","",4,[[["self"]],["peerinfo"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["peersessionstatus"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["peersessioninfo"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["self"]]],[11,"handle","","",9,N],[11,"handle","","",9,N],[0,"reply","gu_net::rpc","",N,N],[3,"ReplyRouter","gu_net::rpc::reply","",N,N],[3,"CallRemote","","",N,N],[3,"CallRemoteUntyped","","",N,N],[12,"0","","",10,N],[12,"1","","",10,N],[12,"2","","",10,N],[4,"SendError","","",N,N],[13,"GenBody","","",11,N],[13,"ParseBody","","",11,N],[13,"MailBox","","",11,N],[13,"NoDestination","","",11,N],[13,"Canceled","","",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"cause","","",11,[[["self"]],["option",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"from","","",11,[[["mailboxerror"]],["self"]]],[11,"started","","",12,N],[11,"service_started","","",12,[[["self"],["context"]]]],[11,"default","","",12,[[],["self"]]],[11,"handle","","",12,N],[11,"handle","","",12,N],[11,"handle","","",12,N],[0,"router","gu_net::rpc","",N,N],[3,"MessageRouter","gu_net::rpc::router","",N,N],[3,"AddEndpoint","","",N,N],[12,"node_id","","",13,N],[12,"recipient","","",13,N],[3,"DelEndpoint","","",N,N],[12,"node_id","","",14,N],[3,"BindDestination","","",N,N],[12,"destination_id","","",15,N],[12,"endpoint","","",15,N],[3,"BindReplyDestination","","",N,N],[12,"destination_id","","",16,N],[12,"endpoint","","",16,N],[8,"LocalEndpoint","","",N,N],[10,"handle","","",17,N],[8,"LocalReplyEndpoint","","",N,N],[10,"handle","","",18,N],[11,"drop","","",19,[[["self"]]]],[11,"default","","",19,[[],["self"]]],[11,"handle","","",19,N],[11,"handle","","",19,N],[11,"handle","","",19,N],[11,"handle","","",19,N],[11,"handle","","",19,N],[11,"handle","","",19,N],[0,"ws","gu_net::rpc","",N,N],[3,"ConnectionSupervisor","gu_net::rpc::ws","",N,N],[3,"StopSupervisor","","",N,N],[3,"IsConnected","","",N,N],[5,"start_connection","","",N,[[["nodeid"],["socketaddr"]],["addr",["connectionsupervisor"]]]],[5,"route","","",N,[[["httprequest"],["nodeid"]],["result",["httpresponse","error"]]]],[11,"started","","",20,N],[11,"handle","","",20,N],[11,"handle","","",20,[[["self"],["isconnected"],["context"]],["bool"]]],[11,"fmt","gu_net::rpc","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",0,N],[11,"with_chain","","",0,[[["e"],["k"]],["self"]]],[11,"kind","","",0,N],[11,"iter","","",0,[[["self"]],["iter"]]],[11,"chain_err","","",0,[[["self"],["f"]],["self"]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",0,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",0,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",0,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",0,[[["self"]],["str"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["mailboxerror"]],["self"]]],[11,"from","","",0,[[["canceled"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[6,"DestinationId","","",N,N],[6,"MessageId","","",N,N],[8,"RemotingSystemService","","",N,N],[11,"from_registry","","",21,[[],["addr"]]],[0,"types","gu_net","",N,N],[3,"NodeId","gu_net::types","",N,N],[11,"clone","","",22,[[["self"]],["nodeid"]]],[11,"hash","","",22,N],[11,"eq","","",22,[[["self"],["nodeid"]],["bool"]]],[11,"ne","","",22,[[["self"],["nodeid"]],["bool"]]],[11,"default","","",22,[[],["self"]]],[11,"as_ref","","",22,N],[11,"from","","",22,N],[11,"from","","",22,N],[11,"from","","",22,[[["cow"]],["self"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"from_str","","",22,[[["str"]],["result"]]],[11,"serialize","","",22,[[["self"],["s"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"deserialize","","",22,[[["d"]],["result"]]],[6,"NodeId","gu_net","",N,N],[11,"from","gu_net::rpc","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","gu_net::rpc::peer","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from_registry","gu_net::rpc","",21,[[],["addr"]]],[11,"from","gu_net::rpc::reply","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","gu_net::rpc::router","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","gu_net::rpc::ws","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","gu_net::types","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"rand","","",22,[[["r"]],["t"]]],[11,"equivalent","","",22,[[["self"],["k"]],["bool"]]]],"paths":[[3,"RpcError"],[3,"EmitMessage"],[3,"RouteMessage"],[3,"RemotingContext"],[3,"PeerInfo"],[3,"PeerSessionInfo"],[4,"State"],[4,"PeerSessionStatus"],[4,"UpdatePeer"],[3,"PeerManager"],[3,"CallRemoteUntyped"],[4,"SendError"],[3,"ReplyRouter"],[3,"AddEndpoint"],[3,"DelEndpoint"],[3,"BindDestination"],[3,"BindReplyDestination"],[8,"LocalEndpoint"],[8,"LocalReplyEndpoint"],[3,"MessageRouter"],[3,"ConnectionSupervisor"],[8,"RemotingSystemService"],[3,"NodeId"],[3,"ListPeers"],[3,"CallRemote"],[3,"StopSupervisor"],[3,"IsConnected"]]};
searchIndex["gu_persist"]={"doc":"","items":[[0,"error","gu_persist","",N,N],[3,"Error","gu_persist::error","The Error type.",N,N],[12,"0","","The kind of the error.",0,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",1,N],[13,"Json","","",1,N],[13,"Io","","",1,N],[13,"MailboxError","","",1,N],[13,"ConcurrentChange","","",1,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",2,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",0,N],[11,"with_chain","","",0,[[["e"],["k"]],["self"]]],[11,"kind","","",0,N],[11,"iter","","",0,[[["self"]],["iter"]]],[11,"chain_err","","",0,[[["self"],["f"]],["self"]]],[11,"backtrace","","",0,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",0,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",0,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",0,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",0,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",0,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",0,[[["self"]],["str"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["errorkind"]],["self"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",1,[[["self"]],["str"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"from","","",0,[[["mailboxerror"]],["self"]]],[0,"config","gu_persist","",N,N],[3,"ConfigManager","gu_persist::config","",N,N],[3,"GetConfig","","",N,N],[3,"SetConfig","","",N,N],[3,"ConfigModule","","",N,N],[4,"SetConfigPath","","",N,N],[13,"Default","","",3,N],[13,"FsPath","","",3,N],[8,"ConfigSection","","",N,N],[10,"from_json","","",4,[[["jsonvalue"]],["result"]]],[10,"to_json","","",4,[[["self"]],["result",["jsonvalue"]]]],[8,"HasSectionId","","",N,N],[18,"SECTION_ID","","",5,N],[11,"default","","",6,[[],["configmanager"]]],[11,"new","","",7,[[],["self"]]],[11,"new","","",8,[[["t"]],["self"]]],[11,"handle","","",6,N],[11,"handle","","",6,N],[11,"handle","","",6,N],[11,"new","","",9,[[],["self"]]],[11,"work_dir","","TODO: for extracted sessions",9,[[["self"]],["path"]]],[11,"cache_dir","","TODO: for downloaded images",9,[[["self"]],["path"]]],[11,"config_dir","","TODO: for configs and ethkeys",9,[[["self"]],["path"]]],[11,"keystore_path","","",9,[[["self"]],["pathbuf"]]],[11,"args_declare","","",9,[[["self"],["app"]],["app"]]],[0,"daemon_module","gu_persist","",N,N],[3,"DaemonModule","gu_persist::daemon_module","",N,N],[11,"hub","","",10,[[],["self"]]],[11,"provider","","",10,[[],["self"]]],[11,"run","","",10,[[["self"]],["bool"]]],[11,"args_declare","","",10,[[["self"],["app"]],["app"]]],[11,"args_consume","","",10,[[["self"],["argmatches"]],["bool"]]],[0,"file_storage","gu_persist","",N,N],[3,"FileStorage","gu_persist::file_storage","",N,N],[11,"from_path","","",11,[[["p"]],["self"]]],[11,"stopped","","",11,N],[11,"handle","","",11,N],[11,"handle","","",11,N],[0,"http","gu_persist","",N,N],[3,"ServerClient","gu_persist::http","",N,N],[8,"ServerConfig","","",N,N],[10,"port","","",12,[[["self"]],["u16"]]],[8,"IntoRequest","","",N,N],[10,"into_request","","",13,[[["self"],["str"]],["result",["clientrequest","error"]]]],[10,"path","","",13,[[["self"]],["str"]]],[11,"default","","",14,[[],["serverclient"]]],[11,"new","","",14,[[],["self"]]],[11,"get","","",14,N],[11,"delete","","",14,N],[11,"patch","","",14,N],[11,"post","","",14,N],[11,"post_json","","",14,N],[11,"empty_post","","",14,N],[11,"put","","",14,N],[11,"empty_put","","",14,N],[11,"handle","","",14,N],[0,"storage","gu_persist","",N,N],[3,"Fetch","gu_persist::storage","",N,N],[12,"0","","",15,N],[3,"Put","","",N,N],[12,"0","","",16,N],[12,"1","","",16,N],[11,"from","gu_persist::error","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","gu_persist::config","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"chain","","",9,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","gu_persist::daemon_module","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"chain","","",10,N],[11,"from","gu_persist::file_storage","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","gu_persist::http","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","gu_persist::storage","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]]],"paths":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[4,"SetConfigPath"],[8,"ConfigSection"],[8,"HasSectionId"],[3,"ConfigManager"],[3,"GetConfig"],[3,"SetConfig"],[3,"ConfigModule"],[3,"DaemonModule"],[3,"FileStorage"],[8,"ServerConfig"],[8,"IntoRequest"],[3,"ServerClient"],[3,"Fetch"],[3,"Put"]]};
searchIndex["gu_provider"]={"doc":"","items":[[0,"envman","gu_provider","Execution environment manager.",N,N],[5,"register","gu_provider::envman","",N,[[["intocowstr"],["addr"]]]],[8,"EnvManService","","",N,N]],"paths":[]};
searchIndex["gu_webapp"]={"doc":"","items":[[3,"WebApp","gu_webapp","",N,N],[3,"WebContent","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"WebApp"],[3,"WebContent"]]};
initSearch(searchIndex);
