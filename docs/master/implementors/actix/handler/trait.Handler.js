(function() {var implementors = {};
implementors["gu_hardware"] = [{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_hardware/actor/struct.HardwareQuery.html\" title=\"struct gu_hardware::actor::HardwareQuery\">HardwareQuery</a>&gt; for <a class=\"struct\" href=\"gu_hardware/actor/struct.HardwareActor.html\" title=\"struct gu_hardware::actor::HardwareActor\">HardwareActor</a>",synthetic:false,types:["gu_hardware::actor::HardwareActor"]},];
implementors["gu_lan"] = [{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_lan/actor/struct.SubscribeInstance.html\" title=\"struct gu_lan::actor::SubscribeInstance\">SubscribeInstance</a>&gt; for <a class=\"struct\" href=\"gu_lan/actor/struct.MdnsActor.html\" title=\"struct gu_lan::actor::MdnsActor\">MdnsActor</a>&lt;<a class=\"struct\" href=\"gu_lan/actor/struct.Continuous.html\" title=\"struct gu_lan::actor::Continuous\">Continuous</a>&gt;",synthetic:false,types:["gu_lan::actor::MdnsActor"]},];
implementors["gu_net"] = [{text:"impl Handler&lt;<a class=\"enum\" href=\"gu_net/rpc/peer/enum.UpdatePeer.html\" title=\"enum gu_net::rpc::peer::UpdatePeer\">UpdatePeer</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/peer/struct.PeerManager.html\" title=\"struct gu_net::rpc::peer::PeerManager\">PeerManager</a>",synthetic:false,types:["gu_net::rpc::peer::PeerManager"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/peer/struct.ListPeers.html\" title=\"struct gu_net::rpc::peer::ListPeers\">ListPeers</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/peer/struct.PeerManager.html\" title=\"struct gu_net::rpc::peer::PeerManager\">PeerManager</a>",synthetic:false,types:["gu_net::rpc::peer::PeerManager"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/struct.RouteMessage.html\" title=\"struct gu_net::rpc::RouteMessage\">RouteMessage</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, TransportError&gt;&gt;&gt; for <a class=\"struct\" href=\"gu_net/rpc/reply/struct.ReplyRouter.html\" title=\"struct gu_net::rpc::reply::ReplyRouter\">ReplyRouter</a>",synthetic:false,types:["gu_net::rpc::reply::ReplyRouter"]},{text:"impl&lt;T&gt; Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/reply/struct.CallRemote.html\" title=\"struct gu_net::rpc::reply::CallRemote\">CallRemote</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"gu_net/rpc/reply/struct.ReplyRouter.html\" title=\"struct gu_net::rpc::reply::ReplyRouter\">ReplyRouter</a> <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.80/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + Message,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Result: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.80/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a>,&nbsp;</span>",synthetic:false,types:["gu_net::rpc::reply::ReplyRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/reply/struct.CallRemoteUntyped.html\" title=\"struct gu_net::rpc::reply::CallRemoteUntyped\">CallRemoteUntyped</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/reply/struct.ReplyRouter.html\" title=\"struct gu_net::rpc::reply::ReplyRouter\">ReplyRouter</a>",synthetic:false,types:["gu_net::rpc::reply::ReplyRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/struct.RouteMessage.html\" title=\"struct gu_net::rpc::RouteMessage\">RouteMessage</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt; for <a class=\"struct\" href=\"gu_net/rpc/router/struct.MessageRouter.html\" title=\"struct gu_net::rpc::router::MessageRouter\">MessageRouter</a>",synthetic:false,types:["gu_net::rpc::router::MessageRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/struct.EmitMessage.html\" title=\"struct gu_net::rpc::EmitMessage\">EmitMessage</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt; for <a class=\"struct\" href=\"gu_net/rpc/router/struct.MessageRouter.html\" title=\"struct gu_net::rpc::router::MessageRouter\">MessageRouter</a>",synthetic:false,types:["gu_net::rpc::router::MessageRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/struct.RouteMessage.html\" title=\"struct gu_net::rpc::RouteMessage\">RouteMessage</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, TransportError&gt;&gt;&gt; for <a class=\"struct\" href=\"gu_net/rpc/router/struct.MessageRouter.html\" title=\"struct gu_net::rpc::router::MessageRouter\">MessageRouter</a>",synthetic:false,types:["gu_net::rpc::router::MessageRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/router/struct.BindDestination.html\" title=\"struct gu_net::rpc::router::BindDestination\">BindDestination</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/router/struct.MessageRouter.html\" title=\"struct gu_net::rpc::router::MessageRouter\">MessageRouter</a>",synthetic:false,types:["gu_net::rpc::router::MessageRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/router/struct.BindReplyDestination.html\" title=\"struct gu_net::rpc::router::BindReplyDestination\">BindReplyDestination</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/router/struct.MessageRouter.html\" title=\"struct gu_net::rpc::router::MessageRouter\">MessageRouter</a>",synthetic:false,types:["gu_net::rpc::router::MessageRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/router/struct.AddEndpoint.html\" title=\"struct gu_net::rpc::router::AddEndpoint\">AddEndpoint</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/router/struct.MessageRouter.html\" title=\"struct gu_net::rpc::router::MessageRouter\">MessageRouter</a>",synthetic:false,types:["gu_net::rpc::router::MessageRouter"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/ws/struct.StopSupervisor.html\" title=\"struct gu_net::rpc::ws::StopSupervisor\">StopSupervisor</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/ws/struct.ConnectionSupervisor.html\" title=\"struct gu_net::rpc::ws::ConnectionSupervisor\">ConnectionSupervisor</a>",synthetic:false,types:["gu_net::rpc::ws::ConnectionSupervisor"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_net/rpc/ws/struct.IsConnected.html\" title=\"struct gu_net::rpc::ws::IsConnected\">IsConnected</a>&gt; for <a class=\"struct\" href=\"gu_net/rpc/ws/struct.ConnectionSupervisor.html\" title=\"struct gu_net::rpc::ws::ConnectionSupervisor\">ConnectionSupervisor</a>",synthetic:false,types:["gu_net::rpc::ws::ConnectionSupervisor"]},];
implementors["gu_persist"] = [{text:"impl&lt;T:&nbsp;<a class=\"trait\" href=\"gu_persist/config/trait.ConfigSection.html\" title=\"trait gu_persist::config::ConfigSection\">ConfigSection</a> + 'static&gt; Handler&lt;<a class=\"struct\" href=\"gu_persist/config/struct.GetConfig.html\" title=\"struct gu_persist::config::GetConfig\">GetConfig</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"gu_persist/config/struct.ConfigManager.html\" title=\"struct gu_persist::config::ConfigManager\">ConfigManager</a>",synthetic:false,types:["gu_persist::config::ConfigManager"]},{text:"impl&lt;T:&nbsp;<a class=\"trait\" href=\"gu_persist/config/trait.ConfigSection.html\" title=\"trait gu_persist::config::ConfigSection\">ConfigSection</a> + 'static&gt; Handler&lt;<a class=\"struct\" href=\"gu_persist/config/struct.SetConfig.html\" title=\"struct gu_persist::config::SetConfig\">SetConfig</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"gu_persist/config/struct.ConfigManager.html\" title=\"struct gu_persist::config::ConfigManager\">ConfigManager</a>",synthetic:false,types:["gu_persist::config::ConfigManager"]},{text:"impl Handler&lt;<a class=\"enum\" href=\"gu_persist/config/enum.SetConfigPath.html\" title=\"enum gu_persist::config::SetConfigPath\">SetConfigPath</a>&gt; for <a class=\"struct\" href=\"gu_persist/config/struct.ConfigManager.html\" title=\"struct gu_persist::config::ConfigManager\">ConfigManager</a>",synthetic:false,types:["gu_persist::config::ConfigManager"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_persist/storage/struct.Fetch.html\" title=\"struct gu_persist::storage::Fetch\">Fetch</a>&gt; for <a class=\"struct\" href=\"gu_persist/file_storage/struct.FileStorage.html\" title=\"struct gu_persist::file_storage::FileStorage\">FileStorage</a>",synthetic:false,types:["gu_persist::file_storage::FileStorage"]},{text:"impl Handler&lt;<a class=\"struct\" href=\"gu_persist/storage/struct.Put.html\" title=\"struct gu_persist::storage::Put\">Put</a>&gt; for <a class=\"struct\" href=\"gu_persist/file_storage/struct.FileStorage.html\" title=\"struct gu_persist::file_storage::FileStorage\">FileStorage</a>",synthetic:false,types:["gu_persist::file_storage::FileStorage"]},{text:"impl&lt;C:&nbsp;<a class=\"trait\" href=\"gu_persist/http/trait.ServerConfig.html\" title=\"trait gu_persist::http::ServerConfig\">ServerConfig</a>, T:&nbsp;<a class=\"trait\" href=\"https://docs.rs/serde/1.0.80/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a> + 'static, M:&nbsp;<a class=\"trait\" href=\"gu_persist/http/trait.IntoRequest.html\" title=\"trait gu_persist::http::IntoRequest\">IntoRequest</a> + Message&gt; Handler&lt;M&gt; for <a class=\"struct\" href=\"gu_persist/http/struct.ServerClient.html\" title=\"struct gu_persist::http::ServerClient\">ServerClient</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Message&lt;Result = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Error&gt;&gt; + 'static,&nbsp;</span>",synthetic:false,types:["gu_persist::http::ServerClient"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
